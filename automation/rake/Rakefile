require "benchmark"
require "date"

task :default => ['build:android', 'build:ios']

namespace :build do
	desc "Cleans the project"
	task :clean do
	  directories_to_delete = [
	      "../../src/MobileApp/XamarinCRM.iOS/bin/iPhone",
	      "../../src/MobileApp/XamarinCRM.iOS/bin/iPhoneSimulator",
	      "../../src/MobileApp/XamarinCRM.iOS/obj",
	      "../../src/MobileApp/XamarinCRM.Android/bin/Debug",
	      "../../src/MobileApp/XamarinCRM.Android/bin/Release",
	      "../../src/MobileApp/XamarinCRM.Android/obj",
	      "../../src/MobileApp/XamarinCRM/bin",
	      "../../src/MobileApp/XamarinCRM/obj",
  	      "../../src/MobileApp/XamarinCRM.Models/bin",
	      "../../src/MobileApp/XamarinCRM.Models/obj",
	      "../../src/MobileApp/XamarinCRM.UITest/bin",
	      "../../src/MobileApp/XamarinCRM.UITest/obj",
	  ]

	  directories_to_delete.each { |x|
	    rm_rf x
	  }
	end

	desc "Build iOS App"
	task :ios => [:clean] do
		sh "pwd"
		sh "nuget restore ../../src/MobileApp/XamarinCRM.iOS/packages.config -PackagesDirectory ../../src/MobileApp/packages/"
		sh "nuget restore ../../src/MobileApp/XamarinCRM.UITest/packages.config -PackagesDirectory ../../src/MobileApp/packages/"
		puts "iOS nugets restored"
		puts
		puts "Building XamarinCRM.iOS"

    time = time_cmd "xbuild ../../src/MobileApp/XamarinCRM.sln /p:Configuration='iOS Debug (Development)' /p:Platform=iPhone /p:BuildIpa=true /verbosity:quiet /flp:LogFile=build_ios.log"

		puts "Checking for Insights on iOS"
		sh "cat ../../src/MobileApp/XamarinCRM.iOS/Main.cs | grep Insights | grep 2b82ddc37582e6c1bece7e5901e8bae3bf7bfb26"

    size = (File.size("../../src/MobileApp/XamarinCRM.iOS/bin/iPhone/Debug/XamarinCRM_Debug.ipa")/1000000.0).round(1)
    log_data "iOS", time, size, "build_ios.log"

		puts "iOS BUILD SUCCESSFUL"
	end

	desc "Build Android App"
	task :android => [:clean] do
		sh "nuget restore ../../src/MobileApp/XamarinCRM.Android/packages.config -PackagesDirectory ../../src/MobileApp/packages"
		puts "Android nugets restored"
		puts
		# addMaptoManifest("../../src/MobileApp/XamarinCRM.Android/Properties/AndroidManifest.xml")
		# puts "Maps added to manifest"
		puts "Building XamarinCRM.Android"

		time = time_cmd "xbuild ../../src/MobileApp/XamarinCRM.Android/XamarinCRM.Android.csproj /p:Configuration=Debug /t:SignAndroidPackage /verbosity:quiet /flp:LogFile=build_android.log"

		puts "Checking for Insights on Android"
		sh "cat ../../src/MobileApp/XamarinCRM.Android/MainActivity.cs | grep Insights | grep 2b82ddc37582e6c1bece7e5901e8bae3bf7bfb26"

    size = (File.size("../../src/MobileApp/XamarinCRM.Android/bin/Debug/com.xamarin.xamarincrm-Signed.apk")/1000000.0).round(1)
    log_data "Android", time, size, "build_android.log"

		puts "Android BUILD SUCCESSFUL"
	end

	def time_cmd(cmd)
		time = Benchmark.realtime do
			sh cmd
		end
		min = (time / 60).to_i.to_s
		sec = (time % 60).to_i.to_s
		sec = sec.length < 2 ? "0" + sec : sec
		return "#{min}:#{sec}"
	end

	def log_data(platform, time, size, log_file)
		date = DateTime.now.strftime("%m/%d/%Y %I:%M%p")
		version = /\d+\.\d+\.\d+\.\d+/.match(`mdls -name kMDItemVersion /Applications/Xamarin\\ Studio.app`)
		user = /\w+$/.match(ENV['HOME'])[0].capitalize

		tail = `tail -n 6 #{log_file}`
		warnings = /(\d+) Warning\(s\)/.match(tail).captures[0]
		errors = /(\d+) Error\(s\)/.match(tail).captures[0]

		puts "*** date: #{date}"
		puts "*** platform: #{platform}"
		puts "*** origin: #{user}"
		puts "*** version: #{version}"
		puts "*** size (MB): #{size}"
		puts "*** time: #{time}"
		puts "*** warnings: #{warnings}"
		puts "*** errors: #{errors}"

		puts "#{date}, #{platform}, #{user}, #{version}, #{size}, #{time}, #{warnings}, #{errors}"
	end
end

namespace :testcloud do
	desc "Build Test Solution"
	task :build_test_solution do
		puts "Restoring Test Nuget Packages"
		sh "nuget restore ../../src/MobileApp/XamarinCRM.UITest/packages.config -PackagesDirectory ../../src/MobileApp/packages/"
		puts "Building Test Solution"
		sh "xbuild ../../src/MobileApp/XamarinCRM.UITest/XamarinCRM.UITest.csproj /verbosity:quiet"

		API_KEY = ENV['API_KEY']
		USER_ACCOUNT = ENV['USER_ACCOUNT']
		DEVICE_SET = ENV['DEVICE_SET']
		CATEGORY = ENV['CATEGORY']

		arguments = ["API_KEY", "USER_ACCOUNT", "DEVICE_SET"]

		[API_KEY, USER_ACCOUNT, DEVICE_SET].each_with_index do |val, index|
			if val.nil?
				raise "#{arguments[index]} cannot be nil, please input a value."
			end
		end

		LOCALE = "en_US"
	end

	desc "Push iOS tests to XTC"
	task :ios => [:build_test_solution] do
		devices = get_device_code(DEVICE_SET, "ios")
		unless CATEGORY.nil?
 			sh "mono ../../src/MobileApp/packages/Xamarin.UITest.1.1.1/tools/test-cloud.exe submit ../../src/MobileApp/XamarinCRM.iOS/bin/iPhone/Debug/*.ipa #{API_KEY} --devices #{devices} --series \"#{DEVICE_SET}\" --locale #{LOCALE} --app-name \"Xamarin CRM\" --user #{USER_ACCOUNT} --assembly-dir ../../src/MobileApp/XamarinCRM.UITest/bin/Debug --dsym ../../src/MobileApp/XamarinCRM.iOS/bin/iPhone/Debug/*.app.dSYM --category #{CATEGORY}"
		else
			sh "mono ../../src/MobileApp/packages/Xamarin.UITest.1.1.1/tools/test-cloud.exe submit ../../src/MobileApp/XamarinCRM.iOS/bin/iPhone/Debug/*.ipa #{API_KEY} --devices #{devices} --series \"#{DEVICE_SET}\" --locale #{LOCALE} --app-name \"Xamarin CRM\" --user #{USER_ACCOUNT} --assembly-dir ../../src/MobileApp/XamarinCRM.UITest/bin/Debug --dsym ../../src/MobileApp/XamarinCRM.iOS/bin/iPhone/Debug/*.app.dSYM"
		end
	end

	desc "Push Android tests to XTC"
	task :android => [:build_test_solution] do
		devices = get_device_code(DEVICE_SET, "android")
		unless CATEGORY.nil?
			sh "mono ../../src/MobileApp/packages/Xamarin.UITest.1.1.1/tools/test-cloud.exe submit ../../src/MobileApp/XamarinCRM.Android/bin/Debug/*Signed.apk #{API_KEY} --devices #{devices} --series \"#{DEVICE_SET}\" --locale #{LOCALE} --app-name \"Xamarin CRM\" --user #{USER_ACCOUNT} --assembly-dir ../../src/MobileApp/XamarinCRM.UITest/bin/Debug --category #{CATEGORY}" # keystore ~/.android/debug.keystore android androiddebugkey android
		else
			sh "mono ../../src/MobileApp/packages/Xamarin.UITest.1.1.1/tools/test-cloud.exe submit ../../src/MobileApp/XamarinCRM.Android/bin/Debug/*Signed.apk #{API_KEY} --devices #{devices} --series \"#{DEVICE_SET}\" --locale #{LOCALE} --app-name \"Xamarin CRM\" --user #{USER_ACCOUNT} --assembly-dir ../../src/MobileApp/XamarinCRM.UITest/bin/Debug" # keystore ~/.android/debug.keystore android androiddebugkey android
		end
	end
end

def get_device_code device_set, platform
	case platform
	when "android"
		case device_set
		when "Small"
			return 'fe5e138d'
		when "Medium"
			return 'f3836139'
		when "Large"
			return "ac078209"
		end
	when "ios"
		case device_set
		when "Small"
			return '2f802e3f'
		when "Medium"
			return '588fda26'
		when "Large"
			return 'e1df384a'
		end
	end
end

def addMaptoManifest(xml_file)
    xml_text = File.read(xml_file)

    newContent = xml_text.gsub("\t\t<meta-data android:name=\"com.google.android.maps.v2.API_KEY\" android:value=\"@string/GoogleMapsKey\" />\n",
        "\t\t<meta-data android:name=\"com.google.android.maps.v2.API_KEY\" android:value=\"AIzaSyBmRuR-M2PV8bF_ljjAQBNzkzSDpmkStfI\" />\n")

    File.open(xml_file, "w"){|newFile| newFile.puts newContent}
end
